name: 'check-r-package'
description: 'Action to check R package with rcmdcheck. Assumes that rcmdcheck has already been installed.'
author: 'Jim Hester'
inputs:
  args:
    description: 'Arguments to pass to the `args` parameter of rcmdcheck. Must be an R expression. Note that it often needs to be quoted in YAML, see the README for details.'
    default: 'c("--no-manual", "--as-cran")'
  build_args:
    description: 'Arguments to pass to the `build_args` parameter of rcmdcheck. Note that it often needs to be quoted in YAML, see the README for details.'
    default: '"--no-manual"'
  error-on:
    description: 'What type of result should cause a build error? Note that it often needs to be quoted in YAML, see the README for details.'
    default: '"warning"'
  check-dir:
    description: 'Where should the check output go? Note that it often needs to be quoted in YAML, see the README for details.'
    default: '"check"'
  working-directory:
    description: 'Using the working-directory keyword, you can specify the working directory of where "rcmdcheck::rcmdcheck" is run.'
    default: '.'
  upload-snapshots:
    description: 'Whether to upload all testthat snapshots as an artifact.'
    default: false
  upload-results:
    description: 'Whether to upload check results for successful runs too.'
    default: false

runs:
  using: "composite"
  steps:
    - name: Check
      id: rcmdcheck    
      env:
        _R_CHECK_CRAN_INCOMING_: false
      run: |
        ## --------------------------------------------------------------------
        options(crayon.enabled = TRUE)
        cat("LOGNAME=", Sys.info()[["user"]], "\n", sep = "", file = Sys.getenv("GITHUB_ENV"), append = TRUE)
        if (Sys.getenv("_R_CHECK_FORCE_SUGGESTS_", "") == "") Sys.setenv("_R_CHECK_FORCE_SUGGESTS_" = "false")
        cat("check-dir-path=", file.path(getwd(), (${{ inputs.check-dir }})), "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
        check_results <- rcmdcheck::rcmdcheck(args = (${{ inputs.args }}), build_args = (${{ inputs.build_args }}), error_on = (${{ inputs.error-on }}), check_dir = (${{ inputs.check-dir }}))
      
        cat("::group::Set site library path\n")
        if (Sys.getenv("RENV_PROJECT") != "") {
          message("renv project detected, no need to set R_LIBS_SITE")
          cat(sprintf("R_LIB_FOR_PAK=%s\n", .libPaths()[1]), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          q("no")
        }
        lib <- Sys.getenv("R_LIBS_SITE")
        if (lib == "") {
          lib <- file.path(dirname(.Library), "site-library")
          cat(sprintf("R_LIBS_SITE=%s\n", lib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          cat(sprintf("R_LIB_FOR_PAK=%s\n", lib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
          message("Setting R_LIBS_SITE to ", lib)
        } else {
          message("R_LIBS_SITE is already set to ", lib)
          cat(sprintf("R_LIB_FOR_PAK=%s\n", strsplit(lib, .Platform$path.sep)[[1]][[1]]), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
        }
        cat(sprintf("echo $R_LIBS_USER\n"), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
        cat(sprintf("echo $R_LIBS_SITE\n"), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
        cat(sprintf("echo $R_LIB_FOR_PAK\n"), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
        message("R_LIBS_USER is ", Sys.getenv("R_LIBS_USER"))
        message("R_LIBS_SITE is ", Sys.getenv("R_LIBS_SITE"))
        message("R_LIB_FOR_PAK is ", Sys.getenv("R_LIB_FOR_PAK"))
        cat(sprintf("R_LIBS_USER=%s\n", lib), file = Sys.getenv("GITHUB_ENV"), append = TRUE)
        message("R_LIBS_USER is ", Sys.getenv("R_LIBS_USER"))
        cat("::endgroup::\n")

        tdir <- tempfile()
        dir.create(tdir)
        git2r::clone("https://github.com/tdhock/binsegRcpp", tdir)
        atime.list <- atime::atime_versions(
          pkg.path=tdir,
          N=2^seq(2, 20),
          setup={
            max.segs <- as.integer(N/2)
            data.vec <- 1:N
          },
          expr=binsegRcpp::binseg_normal(data.vec, max.segs),
          cv="908b77c411bc7f4fcbcf53759245e738ae724c3e",
          "another name"="dcd0808f52b0b9858352106cc7852e36d7f5b15d",
          "another"="5942af606641428315b0e63c7da331c4cd44c091")
        refs.best <- atime::references_best(atime.list)
        plot(refs.best)
        atime::atime_versions_remove("binsegRcpp")
      shell: Rscript {0}
      working-directory: ${{ inputs.working-directory }}

    - name: Show testthat output
      if: always()
      run: |
        ## --------------------------------------------------------------------
        echo ::group::Show testthat output
        TESTTHAT_OUTPUT=$(find check -name 'testthat.Rout*' -exec cat '{}' \; )
        if [ -z "$TESTTHAT_OUTPUT" ]; then
            echo  "No testthat output available."
        else echo $TESTTHAT_OUTPUT; fi
        echo ::endgroup::
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Upload check results
      if: failure() || inputs.upload-results != 'false'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-r${{ matrix.config.r }}-results
        path: ${{ steps.rcmdcheck.outputs.check-dir-path }}

    - name: Upload snapshots
      if: inputs.upload-snapshots != 'false'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-r${{ matrix.config.r }}-testthat-snapshots
        path: ${{ steps.rcmdcheck.outputs.check-dir-path }}/**/tests*/testthat/_snaps
        if-no-files-found: ignore
